using Orchard.ContentManagement.Handlers;
using Orchard.Data;
using Orchard.ContentManagement;
using Orchard.Localization;
using Mod.Twilio.Models;
using Orchard.Logging;
using System;
using Orchard.Security;
using System.Text;

// This code was generated by Orchardizer

namespace Mod.Twilio.Handlers {
    public class TwilioSettingsPartHandler : ContentHandler {
        private readonly IEncryptionService _encryptionService;

        public TwilioSettingsPartHandler(IEncryptionService encryptionService) {
            T = NullLocalizer.Instance;
            Logger = NullLogger.Instance;

            Filters.Add(new ActivatingFilter<TwilioSettingsPart>("Site"));
            OnLoaded<TwilioSettingsPart>(LazyLoadHandlers);
            _encryptionService = encryptionService;
        }

        public new ILogger Logger { get; set; }

        void LazyLoadHandlers(LoadContentContext context, TwilioSettingsPart part) {
            part.AuthTokenField.Getter(() => {
                try {
                    var encryptedAuthToken = part.Retrieve(x => x.AuthToken);
                    return String.IsNullOrWhiteSpace(encryptedAuthToken) ? String.Empty : Encoding.UTF8.GetString(_encryptionService.Decode(Convert.FromBase64String(encryptedAuthToken)));
                }
                catch {
                    Logger.Error("The Twilio authtoken password could not be decrypted. It might be corrupted, try to reset it.");
                    return null;
                }
            });

            part.AuthTokenField.Setter(value => {
                var encryptedAuthToken = String.IsNullOrWhiteSpace(value) ? String.Empty : Convert.ToBase64String(_encryptionService.Encode(Encoding.UTF8.GetBytes(value)));
                part.Store(x => x.AuthToken, encryptedAuthToken);
            });
        }

        public Localizer T { get; set; }
        protected override void GetItemMetadata(GetContentItemMetadataContext context) {
            if (context.ContentItem.ContentType != "Site")
                return;
            base.GetItemMetadata(context);
            context.Metadata.EditorGroupInfo.Add(new GroupInfo(T("SMS")));
        }
    }
}